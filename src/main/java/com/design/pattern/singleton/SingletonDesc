1.) Eager initialization : In this method, class is initialized whether it is to be used or not. Main advantage of this method is its simplicity. 
						You initiate the class at the time of class loading. Its drawback is that class is always initialized whether it is being used or not.
						
						Pros:

						Very simple to implement.
						No need to implement getInstance() method. Instance can be accessed directly.
						
						Cons:

						May lead to resource wastage. Because instance of class is created always, whether it is required or not.
						CPU time is also wasted in creation of instance if it is not required.
						Exception handling is not possible.
						
2.) Using static block: This is also a sub part of Eager initialization. The only difference is object is created in a static block so that we can have access on its creation, like exception handling. In this way also, object is created at the time of class loading.
						It can be used when there is a chance of exceptions in creating object with eager initialization.

						Pros:

						Very simple to implement.
						No need to implement getInstance() method. Instance can be accessed directly.
						Exceptions can be handled in static block.
						
						Cons:

						May lead to resource wastage. Because instance of class is created always, whether it is required or not.
						CPU time is also wasted in creation of instance if it is not required.

3.) Lazy initialization : In this method, class in initialized only when it is required. It can save you from instantiating the class when you don’t need it.
					  	Generally lazy initialization is used when we create a singleton class.
					  	
					  	Pros:

						Object is created only if it is needed. It may overcome resource overcome and wastage of CPU time.
						Exception handling is also possible in method.
					
						Cons:

						Every time a condition of null has to be checked.
						instance can’t be accessed directly.
						In multithreaded environment, it may break singleton property.
						
4.) Thread Safe Singleton: A thread safe singleton in created so that singleton property is maintained even in multithreaded environment. 
						To make a singleton class thread-safe, getInstance() method is made synchronized so that multiple threads can’t access it simultaneously.
								
						Pros:

						Lazy initialization is possible.
						It is also thread safe.
							
						Cons:

						getInstance() method is synchronized so it causes slow performance as multiple threads can’t access it simultaneously.

								
5.) Lazy initialization with Double check locking: In this mechanism, we overcome the overhead problem of synchronized code.
						In this method, getInstance is not synchronized but the block which creates instance is synchronized so that minimum number of threads have to wait and that’s only for first time.
																	
						Pros:

						Lazy initialization is possible.
						It is also thread safe.
						Performance reduced because of synchronized keyword is overcome.
																	
						Cons:

						First time, it can affect performance.
						As cons. of double check locking method is bearable so it can be used for high performance multi-threaded applications.


6.) Bill Pugh Singleton Implementation: Prior to Java5, memory model had a lot of issues and above methods caused failure in certain scenarios in multithreaded environment. 
						So, Bill Pugh suggested a concept of inner static classes to use for singleton.
							
						When the singleton class is loaded, inner class is not loaded and hence doesn’t create object when loading the class. Inner class is created only when getInstance() method is called. So it may seem like eager initialization but it is lazy initialization.
						This is the most widely used approach as it doesn’t use synchronization.
								
								
	When to use What:

1.) Eager initialization is easy to implement but it may cause resource and CPU time wastage. Use it only if cost of initializing a class is less in terms of resources or your program will always need the instance of class.
2.) By using Static block in Eager initialization we can provide exception handling and also can control over instance.
3.) Using synchronized we can create singleton class in multi-threading environment also but it can cause slow performance, so we can use Double check locking mechanism.
4.) Bill Pugh implementation is most widely used approach for singleton classes. Most developers prefer it because of its simplicity and advantages.